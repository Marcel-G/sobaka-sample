name: "CI"

on:
  push:
    branches: [master, next, feature/wasm-worklet]
  pull_request:
    branches: [master, next]

jobs:
  terraform:
    name: "üëü Terraform"
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment: 
      name: ${{ fromJSON('{"refs/heads/master":"production","refs/heads/next":"next"}')[github.ref] }}
      url: ${{ fromJSON('{"refs/heads/master":"https://sobaka.marcelgleeson.com","refs/heads/next":"https://next.sobaka.marcelgleeson.com"}')[github.ref] }}
    env:
      TF_WORKSPACE: ${{ fromJSON('{"refs/heads/master":"sobaka-prod","refs/heads/next":"sobaka-next"}')[github.ref] }}
    outputs:
      deploy_bucket: ${{ steps.collect-outputs.outputs.deploy_bucket }}
      deploy_role: ${{ steps.collect-outputs.outputs.deploy_role }}
      website_cdn_root_id: ${{ steps.collect-outputs.outputs.website_cdn_root_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # https://github.com/hashicorp/setup-terraform/issues/20#issuecomment-679424701
          terraform_wrapper: false
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        working-directory: infrastructure
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: infrastructure
        id: init
        run: terraform init -upgrade

      - name: Terraform Validate
        working-directory: infrastructure
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: infrastructure
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        working-directory: infrastructure
        run: terraform apply -auto-approve
      
      - name: Terraform Outputs
        id: collect-outputs
        working-directory: infrastructure
        run: |
          echo "::set-output name=deploy_bucket::$(terraform output -raw website_root_s3_bucket)"
          echo "::set-output name=deploy_role::$(terraform output -raw role-to-assume)"
          echo "::set-output name=website_cdn_root_id::$(terraform output -raw website_cdn_root_id)"

  build:
    name: "üß¶ Build"
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            components: rust-src
            target: wasm32-unknown-unknown
            override: true
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.14
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      - run: npm ci 
        working-directory: frontend
      - run: npm run build
        working-directory: frontend
      - uses: actions/upload-artifact@v2
        with:
          name: build-output
          path: frontend/build 
  deploy:
    name: "üèÉ‚Äç‚ôÇÔ∏è Deploy"
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-output
          path: frontend/build
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ needs.terraform.outputs.deploy_role }}
          role-session-name: DeploySession
      - name: "Copy files to S3"
        run: |
          aws s3 sync frontend/build s3://${{ needs.terraform.outputs.deploy_bucket }} \
            --acl public-read \
            --metadata-directive REPLACE \
            --cache-control 'max-age=31104000'
          
           aws s3 cp frontend/build/index.html s3://${{ needs.terraform.outputs.deploy_bucket }} \
            --acl public-read \
            --metadata-directive REPLACE \
            --cache-control 'max-age=3600'
      - name: "Invalidate CloudFront Cache"
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.terraform.outputs.website_cdn_root_id }} \
            --paths "/index.html"
    needs:
      - build
      - terraform

concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true
