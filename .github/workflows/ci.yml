name: "CI"

on:
  push:
    branches: [master, next, feat/helia]
  pull_request:
    branches: [master, next]

jobs:
  # build-frontend:
  #   name: "üß¶ Build Frontend"
  #   runs-on: macos-latest
  #   defaults:
  #     run:
  #       working-directory: frontend
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install latest nightly
  #       uses: actions-rs/toolchain@v1
  #       with:
  #           toolchain: nightly
  #           components: rust-src
  #           target: wasm32-unknown-unknown
  #           override: true
  #     # Cache somehow breaks wasm_opt
  #     # https://github.com/Marcel-G/xtask-wasm/blob/main/src/wasm_opt.rs#L38
  #     # - uses: Swatinem/rust-cache@v2
  #     #   with:
  #     #       workspaces: sobaka-dsp
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 16.14
  #         cache: 'npm'
  #         cache-dependency-path: '**/package-lock.json'
  #     - run: npm ci 
  #     - run: npm run build
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: frontend-build-output
  #         path: frontend/build

  build-backend:
    name: "üèÄ Build Backend"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/webrtc-relay
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: backend/webrtc-relay
          tags: rust-relay:latest
          outputs: type=docker,dest=/tmp/rust-relay.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: rust-relay
          path: /tmp/rust-relay.tar

  terraform:
    name: "üëü Terraform"
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    environment: 
      name: next
      url: https://next.sobaka.marcelgleeson.com
      # name: ${{ fromJSON('{"refs/heads/master":"production","refs/heads/next":"next"}')[github.ref] }}
      # url: ${{ fromJSON('{"refs/heads/master":"https://sobaka.marcelgleeson.com","refs/heads/next":"https://next.sobaka.marcelgleeson.com"}')[github.ref] }}
    env:
      # TF_WORKSPACE: ${{ fromJSON('{"refs/heads/master":"sobaka-prod","refs/heads/next":"sobaka-next"}')[github.ref] }}
      TF_WORKSPACE: sobaka-next
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      deploy_bucket: ${{ steps.collect-outputs.outputs.deploy_bucket }}
      deploy_role: ${{ steps.collect-outputs.outputs.deploy_role }}
      cdn_distribution_id: ${{ steps.collect-outputs.outputs.cdn_distribution_id }}
      ecr_repository_webrtc_relay: ${{ steps.collect-outputs.outputs.ecr_repository_webrtc_relay }}
      instance_id_webrtc_relay: ${{ steps.collect-outputs.outputs.instance_id_webrtc_relay }}
    needs:
      # - build-frontend
      - build-backend
    defaults:
      run:
        working-directory: infrastructure
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # https://github.com/hashicorp/setup-terraform/issues/20#issuecomment-679424701
          terraform_wrapper: false
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init -upgrade

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file="$TF_WORKSPACE.tfvars"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="$TF_WORKSPACE.tfvars"
      
      - name: Terraform Outputs
        id: collect-outputs
        run: |
          echo "deploy_bucket=$(terraform output -raw deploy_bucket)" >> $GITHUB_OUTPUT
          echo "deploy_role=$(terraform output -raw deploy_role)" >> $GITHUB_OUTPUT
          echo "cdn_distribution_id=$(terraform output -raw cdn_distribution_id)" >> $GITHUB_OUTPUT
          echo "ecr_repository_webrtc_relay=$(terraform output -raw ecr_repository_webrtc_relay)" >> $GITHUB_OUTPUT
          echo "instance_id_webrtc_relay=$(terraform output -raw instance_id_webrtc_relay)" >> $GITHUB_OUTPUT

  deploy-backend:
    name: "üèÉ‚Äç‚ôÇÔ∏è Deploy Backend"
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs:
      - build-backend
      - terraform
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          role-to-assume: ${{ needs.terraform.outputs.deploy_role }}
          role-session-name: DeploySession
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: rust-relay
          path: /tmp
      - name: Tag and upload image to ECR
        env:
          ECR_REPOSITORY: ${{ needs.terraform.outputs.ecr_repository_webrtc_relay }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker load --input /tmp/rust-relay.tar
          docker tag rust-relay:latest $ECR_REPOSITORY:$IMAGE_TAG
          docker tag rust-relay:latest $ECR_REPOSITORY:latest
          docker push $ECR_REPOSITORY --all-tags
      - name: Deploy image to EC2
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-id "${{ needs.terraform.outputs.instance_id_webrtc_relay }}" \
            --parameters '{
              "executionTimeout":["3600"],
              "commands":[
                "sudo su ec2-user",
                "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ needs.terraform.outputs.ecr_repository_webrtc_relay }}",
                "docker pull ${{ needs.terraform.outputs.ecr_repository_webrtc_relay }}",
                "docker stop instance || true",
                "docker run \\",
                  " --rm \\",
                  " --name instance \\",
                  " -p 9090:9090/udp \\",
                  " -p 9091:9091/udp \\",
                  " -v cert:/cert \\",
                  " -d ${{ needs.terraform.outputs.ecr_repository_webrtc_relay }}:latest"
            ]}' --region us-east-1

  # deploy-frontend:
  #   name: "üèÉ‚Äç‚ôÇÔ∏è Deploy"
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'
  #   needs:
  #     - terraform
  #   permissions:
  #     id-token: write
  #     contents: read

  #   steps:
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-region: us-east-1
  #         role-to-assume: ${{ needs.terraform.outputs.deploy_role }}
  #         role-session-name: DeploySession
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: frontend-build-output
  #         path: frontend/build
  #     - name: "Deploy files to S3"
  #       run: |
  #         aws s3 sync frontend/build s3://${{ needs.terraform.outputs.deploy_bucket }} \
  #           --metadata-directive REPLACE \
  #           --cache-control 'max-age=31104000'
          
  #          aws s3 cp frontend/build/index.html s3://${{ needs.terraform.outputs.deploy_bucket }} \
  #           --metadata-directive REPLACE \
  #           --cache-control 'max-age=3600'
  #     - name: "Invalidate CloudFront Cache"
  #       run: |
  #         aws cloudfront create-invalidation \
  #           --distribution-id ${{ needs.terraform.outputs.cdn_distribution_id }} \
  #           --paths "/index.html"


concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true
